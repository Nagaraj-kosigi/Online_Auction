# Generated by Django 5.2 on 2025-04-28 17:15

from django.db import migrations
from django.utils import timezone
import random


def create_sample_fraud_reports(apps, schema_editor):
    """
    Create sample fraud reports and risk scores
    """
    User = apps.get_model('auth', 'User')
    Auction = apps.get_model('auctions', 'Auction')
    FraudReport = apps.get_model('fraud_detection', 'FraudReport')
    FraudRiskScore = apps.get_model('fraud_detection', 'FraudRiskScore')

    # Get users
    users = list(User.objects.all())
    if not users:
        return

    # Get auctions
    auctions = list(Auction.objects.all())
    if not auctions:
        return

    # Sample fraud report reasons
    fraud_reasons = [
        "The item description doesn't match the images provided.",
        "Seller is asking for payment outside the platform.",
        "The price is suspiciously low compared to market value.",
        "Seller has multiple identical listings with different accounts.",
        "The item appears to be counterfeit based on the images.",
        "Seller is unwilling to provide additional information when requested.",
        "The listing contains contact information to bypass the platform.",
        "The images appear to be stolen from another website.",
    ]

    # Create fraud reports for ~10% of auctions
    num_reports = max(1, len(auctions) // 10)
    report_auctions = random.sample(auctions, num_reports)

    for auction in report_auctions:
        # Find a reporter who isn't the auction creator
        potential_reporters = [u for u in users if u.id != auction.created_by.id]
        if not potential_reporters:
            continue

        reporter = random.choice(potential_reporters)
        reason = random.choice(fraud_reasons)

        # Create the report
        FraudReport.objects.create(
            auction=auction,
            reported_by=reporter,
            reason=reason,
            status=random.choice(['pending', 'investigating', 'confirmed', 'dismissed']),
            admin_notes="Sample fraud report for demonstration purposes.",
            created_at=timezone.now(),
            updated_at=timezone.now(),
        )

    # Create risk scores for all auctions
    for auction in auctions:
        # Skip if risk score already exists
        if FraudRiskScore.objects.filter(auction=auction).exists():
            continue

        # Generate a random risk score
        if auction in report_auctions:
            # Higher risk for reported auctions
            risk_score = random.uniform(0.6, 0.95)
        else:
            # Lower risk for non-reported auctions
            risk_score = random.uniform(0.05, 0.4)

        try:
            # Create risk score
            FraudRiskScore.objects.create(
                auction=auction,
                score=risk_score,
                features={
                    'price_ratio': random.uniform(0.1, 1.0),
                    'user_age_days': random.uniform(0.1, 1.0),
                    'description_length': random.uniform(0.3, 1.0),
                    'has_images': random.choice([0, 1]),
                    'previous_auctions': random.uniform(0, 1.0),
                    'bid_count': random.uniform(0, 1.0),
                    'category_risk': random.uniform(0.1, 0.9),
                },
                last_updated=timezone.now(),
                is_flagged=risk_score >= 0.7,
                admin_reviewed=random.choice([True, False]),
            )
        except Exception as e:
            # Skip if there's an error (e.g., unique constraint)
            print(f"Error creating risk score for auction {auction.id}: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('fraud_detection', '0001_initial'),
        ('auctions', '0009_create_sample_bids'),  # Make sure this runs after bids are created
    ]

    operations = [
        migrations.RunPython(create_sample_fraud_reports),
    ]
