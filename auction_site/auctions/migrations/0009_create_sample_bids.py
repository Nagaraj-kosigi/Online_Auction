# Generated by Django 5.2 on 2025-04-28 17:14

from django.db import migrations
from django.utils import timezone
import datetime
import random


def create_sample_bids(apps, schema_editor):
    """
    Create sample bids for the auctions
    """
    User = apps.get_model('auth', 'User')
    Auction = apps.get_model('auctions', 'Auction')
    Bid = apps.get_model('auctions', 'Bid')

    # Create some bidder users if they don't exist
    bidder_usernames = ['bidder1', 'bidder2', 'bidder3', 'bidder4']
    bidders = []

    for i, username in enumerate(bidder_usernames):
        user, created = User.objects.get_or_create(
            username=username,
            defaults={
                'email': f'{username}@example.com',
                'is_active': True,
                'is_staff': False,
                'is_superuser': False,
            }
        )
        bidders.append(user)

    # Get all active auctions
    auctions = Auction.objects.filter(is_active=True)

    if not auctions:
        # No auctions to bid on
        return

    # Current time
    now = timezone.now()

    # Create bids for each auction
    for auction in auctions:
        # Skip if auction hasn't started yet
        if auction.start_date > now:
            continue

        # Determine number of bids (1-8 bids per auction)
        num_bids = random.randint(1, 8)

        # Starting price
        current_price = float(auction.starting_price)

        # Create bids with increasing prices
        for i in range(num_bids):
            # Random bidder
            bidder = random.choice(bidders)

            # Skip if bidder is the auction creator
            if bidder.username == auction.created_by.username:
                continue

            # Increase price by 5-15%
            increase_percentage = random.uniform(0.05, 0.15)
            bid_amount = current_price * (1 + increase_percentage)
            bid_amount = round(bid_amount, 2)  # Round to 2 decimal places

            # Create bid
            bid_time = auction.start_date + datetime.timedelta(
                seconds=random.randint(
                    0,
                    int((min(now, auction.end_date) - auction.start_date).total_seconds())
                )
            )

            # Create the bid
            bid = Bid.objects.create(
                auction=auction,
                bidder=bidder,
                amount=bid_amount,
                bid_time=bid_time,
                status='active'
            )

            # Update current price
            current_price = bid_amount

        # Update auction's current price to match highest bid
        auction.current_price = current_price
        auction.save()


class Migration(migrations.Migration):

    dependencies = [
        ('auctions', '0008_create_sample_auctions'),
    ]

    operations = [
        migrations.RunPython(create_sample_bids),
    ]
